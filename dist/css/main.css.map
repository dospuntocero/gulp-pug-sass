{"version":3,"sources":["common/_variables.scss","common/grid.scss","utils/_animate.scss","components/_mixins.scss","common/_global.scss","components/_buttons.scss","utils/_units.scss"],"names":[],"mappings":"AACA,uEAAY;AA0BZ;;GAEG;AAKH;;;GAGG;ACrCH;EACI,aAAY;EACZ,eAAc;EACd,iBAAgB,EACnB;;AACD;EACC,qBAAa;EAAb,sBAAa;EAAb,qBAAa;EAAb,cAAa;EACb,+BAAmB;EAAnB,8BAAmB;EAAnB,4BAAmB;MAAnB,wBAAmB;UAAnB,oBAAmB,EACnB;;AACD;EACC,oBAAM;EAAN,gBAAM;MAAN,YAAM;UAAN,QAAM;EACN,wBAAuB,EACvB;;ACZD;EACC,+BAAsB;UAAtB,uBAAsB;EACtB,kCAAyB;UAAzB,0BAAyB,EACzB;;AAED;EACC;IACC,WAAU,EAAA;EAGX;IACC,WAAU,EAAA,EAAA;;AANZ;EACC;IACC,WAAU,EAAA;EAGX;IACC,WAAU,EAAA,EAAA;;AAIZ;EACC,+BAAsB;UAAtB,uBAAsB,EACtB;;AAED;EACC;IACC,WAAU,EAAA;EAGX;IACC,WAAU,EAAA,EAAA;;AANZ;EACC;IACC,WAAU,EAAA;EAGX;IACC,WAAU,EAAA,EAAA;;AAIZ;EACC,gCAAuB;UAAvB,wBAAuB,EACvB;;AAED;EACC;IACC,WAAU;IACV,0CAA8B;YAA9B,kCAA8B,EAAA;EAG/B;IACC,WAAU,EAAA,EAAA;;AAPZ;EACC;IACC,WAAU;IACV,0CAA8B;YAA9B,kCAA8B,EAAA;EAG/B;IACC,WAAU,EAAA,EAAA;;AAKZ;EACC,+BAAsB;UAAtB,uBAAsB,EACtB;;AAED;EACC;IACC,WAAU,EAAA;EAGX;IACC,WAAU;IACV,0CAA8B;YAA9B,kCAA8B,EAAA;EAG/B;IACC,WAAU,EAAA,EAAA;;AAXZ;EACC;IACC,WAAU,EAAA;EAGX;IACC,WAAU;IACV,0CAA8B;YAA9B,kCAA8B,EAAA;EAG/B;IACC,WAAU,EAAA,EAAA;;AAIZ;EACC,gCAAuB;UAAvB,wBAAuB,EACvB;;AClED;EAAe,oBAAmB,EAAA;;AAElC;EACC,+BAA8B;EAC9B,uBAAsB;EACtB,8BAA6B,EAC7B;;AAED;;;EAGC,4BAA2B;EAC3B,oBAAmB,EACnB;;AAUD;EACC,+BAAyB;UAAzB,uBAAyB;EACzB,kBAAmB;EACnB,mBAAmB;EACnB,mBAAuB;EACvB,kBHvB0B,EGyB1B;EAdA;IACC,eAAe;IACf,YAAY;IACZ,YAAc,EACd;;AAJD;EACC,eAAe;EACf,YAAY;EACZ,YAAc,EACd;;ACpBF;EACC,+BAAwB;UAAxB,uBAAwB;EACxB,eAAc,EACd;;AAED;EACC,UAAS;EACT,WAAU;EAEV,gCJgBoC;EIfpC,iBJMsB,EILtB;;AAED;EACC,kCAAiC;EACjC,iBAAgB,EAChB;;ACfD;EACC,qBCuFuD;EDtFvD,4BCsFuD;EDrFvD,eAAuB;EACvB,oBAA4B;EAC5B,0BAAiC;EACjC,4BAAoB;UAApB,oBAAoB;EACpB,sBAAqB;EF8BrB,yCHlBuC;EGkBvC,oCHlBuC;EGkBvC,iCHlBuC,EKHvC;EAhBD;IAYE,eAAuB;IACvB,0BAAiC;IACjC,oBAAoB,EACpB","file":"main.css","sourcesContent":["// Base styles\n@import url('https://fonts.googleapis.com/css?family=Asap|Roboto:500');\n\n// Variables\n\n$site-width     :    1140px !default;\n// Font size attribute applied to `<html>` and `<body>`. We use 100% by default so the value is inherited from the user's browser settings.\n// @type Number\n$global-font-size: 100% !default;\n\n// Global width of your site. Used by the grid to determine row width.\n// @type Number\n$global-width: rem-calc($site-width);\n\n// Default line height for all type. `$global-lineheight` is 24px while `$global-font-size` is 16px\n// @type Number\n$global-lineheight: 1.5 !default;\n\n\n//transitios\n$default-transition: all .2s ease-in-out;\n\n// Colors\n$brand-primary  :    #27ae60;\n\n$body-font-family: 'Asap', sans-serif;\n\n/*\n * - - - - [ Grid & Breakpoints - used with the column grid ]\n */\n$container          : 1200px;                       // Max width of grid.\n$row                : 100%;                         // Max width of row.\n$gutter             : 0;                            // Gutter width. Will be /2 for each col.\n\n/* Note: breakpoints are set to be that size and up.\n * We don't set a 0-and-up because those are the\n * base styles for mobile first.\n */\n$breakpoint-map: (\n    'xs'            : ( min-width: 0px ),           // XSmall up to Small.\n    'sm'            : ( min-width: 480px ),         // Small up to Medium.\n    'md'            : ( min-width: 768px ),         // Medium up to Large.\n    'lg'            : ( min-width: 960px ),         // Large up to X-Large.\n    'xl'            : ( min-width: $container )     // X-Large and above.\n);\n",".container{\n    width: 960px;\n    margin: 0 auto;\n    overflow: hidden;    \n}\n.row {\n\tdisplay: flex;\n\tflex-direction: row;\n}\n.col{\n\tflex:1;\n\tpadding: 0 rem-calc(60);\n}",".animated {\n\tanimation-duration: 1s;\n\tanimation-fill-mode: both;\n}\n\n@keyframes fadeIn {\n\tfrom {\n\t\topacity: 0;\n\t}\n\n\tto {\n\t\topacity: 1;\n\t}\n}\n\n.fadeIn {\n\tanimation-name: fadeIn;\n}\n\n@keyframes fadeOut {\n\tfrom {\n\t\topacity: 1;\n\t}\n\n\tto {\n\t\topacity: 0;\n\t}\n}\n\n.fadeOut {\n\tanimation-name: fadeOut;\n}\n\n@keyframes zoomIn {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: scale3d(.3, .3, .3);\n\t}\n\n\tto {\n\t\topacity: 1;\n\t}\n\n}\n\n.zoomIn {\n\tanimation-name: zoomIn;\n}\n\n@keyframes zoomOut {\n\tfrom {\n\t\topacity: 1;\n\t}\n\n\t50% {\n\t\topacity: 0;\n\t\ttransform: scale3d(.3, .3, .3);\n\t}\n\n\tto {\n\t\topacity: 0;\n\t}\n}\n\n.zoomOut {\n\tanimation-name: zoomOut;\n}","@-ms-viewport {width: device-width;}\n\nhtml {\n\t-webkit-box-sizing: border-box;\n\tbox-sizing: border-box;\n\t-ms-overflow-style: scrollbar;\n}\n\n*,\n*::before,\n*::after {\n\t-webkit-box-sizing: inherit;\n\tbox-sizing: inherit;\n}\n\n@mixin cf() {\n\t&::after {\n\t\tdisplay : block;\n\t\tcontent : \"\";\n\t\tclear   : both;\n\t}\n}\n\n.container {\n\tbox-sizing   : border-box;\n\tmargin-left  : auto;\n\tmargin-right : auto;\n\tposition     : relative;\n\tmax-width    : $site-width;\n\t@include cf;\n}\n\n.row{\n\t@include cf;\n}\n\n\n@mixin transition($transition:$default-transition) {\n\ttransition: $transition;\n}\n\n\n@function perc($target,$context) {\n\t@return ($target / $context) * 100%;\n}\n\n@mixin pwidth($target, $context){\n\twidth: perc($target,$context);\n}\n\n@mixin colu($target, $context, $float-direction:left) {\n\t@include pwidth($target, $context);\n\tfloat : $float-direction;\n}\n\n@mixin colf($fraction, $float-direction:left) {\n\twidth: 100% * $fraction;\n\tfloat: $float-direction;\n}\n","*{\n\tbox-sizing  : border-box;\n\tfont-size: 1em;\n}\n\nbody {\n\tmargin: 0;\n\tpadding: 0;\n\n\tfont-family: $body-font-family;\n\tline-height: $global-lineheight;\n}\n\nh1,h2,h3,h4,h5,h6{\n\tfont-family: 'Roboto', sans-serif;\n\tfont-weight :500;\n}\n","// Buttons\n.btn {\n\tfont-size     : rem-calc(13);\n\tpadding       : rem-calc(6) rem-calc(21);\n\tcolor         : #F9B200;\n\tbackground: rgb(0, 109, 138);\n\tborder        : 1px solid #F9B200;\n\tborder-radius : 10px;\n\ttext-decoration: none;\n\t@include transition();\n\n\n\t&:hover{\n\t\tcolor         : #006D8A;\n\t\tborder        : 1px solid #006D8A;\n\t\tbackground : #F9B200;\n\t}\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group functions\n////\n\n$global-font-size: 100% !default;\n\n/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.\n///\n/// @param {Number} $num - Number to strip unit from.\n///\n/// @returns {Number} The same number, sans unit.\n@function strip-unit($num) {\n\t@return $num / ($num * 0 + 1);\n}\n\n/// Converts one or more pixel values into matching rem values.\n///\n/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.\n/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$base-font-size` variable as the base.\n///\n/// @returns {List} A list of converted values.\n@function rem-calc($values, $base: null) {\n\t$rem-values : ();\n\t$count : length($values);\n\n\t// If no base is defined, defer to the global font size\n\t@if $base == null {\n\t\t$base : $global-font-size;\n\t}\n\n\t// If the base font size is a %, then multiply it by 16px\n\t// This is because 100% font size = 16px in most all browsers\n\t@if unit($base) == '%' {\n\t\t$base : ($base / 100%) * 16px;\n\t}\n\n\t// Using rem as base allows correct scaling\n\t@if unit($base) == 'rem' {\n\t\t$base : strip-unit($base) * 16px;\n\t}\n\n\t@if $count == 1 {\n\t\t@return -zf-to-rem($values, $base);\n\t}\n\n\t@for $i from 1 through $count {\n\t\t$rem-values : append($rem-values, -zf-to-rem(nth($values, $i), $base));\n\t}\n\n\t@return $rem-values;\n}\n\n// Converts a unitless, pixel, or rem value to em, for use in breakpoints.\n@function -zf-bp-to-em($value) {\n\t// Pixel and unitless values are converted to rems\n\t@if unit($value) == 'px' or unitless($value) {\n\t\t$value : rem-calc($value, $base : 16px);\n\t}\n\n\t// Then the value is converted to ems\n\t@return strip-unit($value) * 1em;\n}\n\n\n/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.\n/// @access private\n///\n/// @param {Number} $value - Pixel value to convert.\n/// @param {Number} $base [null] - Base for pixel conversion.\n///\n/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.\n@function -zf-to-rem($value, $base: null) {\n\t// Check if the value is a number\n\t@if type-of($value) != 'number' {\n\t\t@warn inspect($value) + ' was passed to rem-calc(), which is not a number.';\n\t\t@return $value;\n\t}\n\n\t// Transform em into rem if someone hands over 'em's\n\t@if unit($value) == 'em' {\n\t\t$value : strip-unit($value) * 1rem;\n\t}\n\n\t// Calculate rem if units for $value is not rem or em\n\t@if unit($value) != 'rem' {\n\t\t$value : strip-unit($value) / strip-unit($base) * 1rem;\n\t}\n\n\t// Turn 0rem into 0\n\t@if $value == 0rem {\n\t\t$value : 0;\n\t}\n\n\t@return $value;\n}\n\n/// Converts a pixel, percentage, rem or em value to a unitless value based on a given font size. Ideal for working out unitless line heights.\n///\n/// @param {Number} $value - Value to convert to a unitless line height\n/// @param {Number} $base - The font size to use to work out the line height - defaults to $global-font-size\n///\n/// @return {Number} - Unitless number\n@function unitless-calc($value, $base: null) {\n\n\t// If no base is defined, defer to the global font size\n\t@if $base == null {\n\t\t$base : $global-font-size;\n\t}\n\n\t// First, lets convert our $base to pixels\n\n\t// If the base font size is a %, then multiply it by 16px\n\t@if unit($base) == '%' {\n\t\t$base : ($base / 100%) * 16px;\n\t}\n\n\t@if unit($base) == 'rem' {\n\t\t$base : strip-unit($base) * 16px;\n\t}\n\n\t@if unit($base) == 'em' {\n\t\t$base : strip-unit($base) * 16px;\n\t}\n\n\t// Now lets convert our value to pixels too\n\t@if unit($value) == '%' {\n\t\t$value : ($value / 100%) * $base;\n\t}\n\n\t@if unit($value) == 'rem' {\n\t\t$value : strip-unit($value) * $base;\n\t}\n\n\t@if unit($value) == 'em' {\n\t\t$value : strip-unit($value) * $base;\n\t}\n\n\t// 'px'\n\t@if unit($value) == 'px' {\n\t\t@return strip-unit($value) / strip-unit($base);\n\t}\n\n\t// assume that line-heights greatern then 10 are meant to be absolute in 'px'\n\t@if unitless($value) and ($value > 10) {\n\t\t@return $value / strip-unit($base);\n\t}\n\n\t@return $value;\n}\n"]}